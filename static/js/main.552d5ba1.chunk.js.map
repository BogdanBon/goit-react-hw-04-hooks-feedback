{"version":3,"sources":["components/statistics/Statistics.module.css","components/analitics/Analitics.module.css","components/section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.js","components/section/Section.js","components/statistics/Statistics.js","components/analitics/Analitics.js","components/notification/Notification.js","components/reviewCounter/ReviewCounter.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","handleIncrement","options","Object","keys","map","option","className","s","btn","type","onClick","Section","title","children","container","Statistics","onReviewGood","onReviewNeutral","onReviewBad","item_good","item_neutral","item_bad","Analitics","onTotalReviews","onPositiveReviews","item","Notification","message","ReviewCounter","useState","good","setGood","neutral","setNeutral","bad","setBad","state","countTotalFeedback","prevState","totalReviews","positiveReviews","Math","round","countPositiveFeedbackPercentage","App","initialValueGood","initialValueNeutral","initialValueBad","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.552d5ba1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Statistics_container__30xuo\",\"item_good\":\"Statistics_item_good__3RvlL\",\"item_neutral\":\"Statistics_item_neutral__3Mnzm\",\"item_bad\":\"Statistics_item_bad__1VQ6t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Analitics_container__3A4jz\",\"item\":\"Analitics_item__16Dmn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__3qas_\",\"title\":\"Section_title__2oIwe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__1rp9P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Notification_item__32I2G\",\"color\":\"Notification_color__x4_4-\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ handleIncrement, options }) => (\n  <div>\n    {Object.keys(options).map(option => (\n      <li key={option}>\n        <button\n          className={s.btn}\n          type=\"button\"\n          onClick={() => handleIncrement(option)}\n        >\n          {option}\n        </button>\n      </li>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  handleIncrement: PropTypes.func,\n  options: PropTypes.object,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={s.container}>\n    <h2 className={s.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nconst Statistics = ({ onReviewGood, onReviewNeutral, onReviewBad }) => (\n  <div className={s.container}>\n    <p className={s.item_good}>Good: {onReviewGood}</p>\n    <p className={s.item_neutral}>Neutral: {onReviewNeutral}</p>\n    <p className={s.item_bad}>Bad: {onReviewBad}</p>\n  </div>\n);\n\nStatistics.propTypes = {\n  onReviewGood: PropTypes.number.isRequired,\n  onReviewNeutral: PropTypes.number.isRequired,\n  onReviewBad: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Analitics.module.css';\n\nconst Analitics = ({ onTotalReviews, onPositiveReviews }) => (\n  <div className={s.container}>\n    <p className={s.item}>\n      <span>Total reviews:</span>\n      <span>{onTotalReviews}</span>\n    </p>\n    <p className={s.item}>\n      <span>Positive feedback:</span>\n      <span>{onPositiveReviews}</span>\n    </p>\n  </div>\n);\n\nAnalitics.propTypes = {\n  onTotalReviews: PropTypes.number.isRequired,\n  onPositiveReviews: PropTypes.string.isRequired,\n};\n\nexport default Analitics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Notification.module.css';\n\nconst Notification = ({ message }) => (\n  <div>\n    <p className={s.item}>{message}</p>\n  </div>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Section from '../section/Section';\nimport Statistics from '../statistics/Statistics';\nimport Analitics from '../analitics/Analitics';\nimport Notification from '../notification/Notification';\n\nexport default function ReviewCounter() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const state = { good, neutral, bad };\n\n  const handleIncrement = option => {\n    switch (option) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const totalReviews = good + neutral + bad;\n\n    return totalReviews;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const totalReviews = good + neutral + bad;\n    const positiveReviews = good;\n\n    return `${Math.round((positiveReviews / totalReviews) * 100)} %`;\n  };\n\n  return (\n    <div>\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions options={state} handleIncrement={handleIncrement} />\n      </Section>\n\n      {countTotalFeedback() > 0 ? (\n        <div>\n          <Section title={'Reviews statistics'}>\n            <Statistics\n              onReviewGood={good}\n              onReviewNeutral={neutral}\n              onReviewBad={bad}\n            />\n          </Section>\n          <Section title={'Reviews analitics'}>\n            <Analitics\n              onTotalReviews={countTotalFeedback()}\n              onPositiveReviews={countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        </div>\n      ) : (\n        <div>\n          <Section title={'Reviews statistics'}>\n            <Notification message=\"🤷‍♀️ No feedback given yet 🤷‍♂️\" />\n          </Section>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// class OldReviewCounter extends React.Component {\n//   static defaultProps = {\n//     initialValueGood: 0,\n//     initialValueNeutral: 0,\n//     initialValueBad: 0,\n//   };\n\n//   static propTypes = {\n//     initialValueGood: PropTypes.number,\n//     initialValueNeutral: PropTypes.number,\n//     initialValueBad: PropTypes.number,\n//   };\n\n//   state = {\n//     good: this.props.initialValueGood,\n//     neutral: this.props.initialValueNeutral,\n//     bad: this.props.initialValueBad,\n//   };\n\n//   handleIncrement = option => {\n//     this.setState(prevState => ({ [option]: prevState[option] + 1 }));\n//   };\n\n//   countTotalFeedback() {\n//     const totalReviews = this.state.good + this.state.neutral + this.state.bad;\n\n//     return totalReviews;\n//   }\n\n//   countPositiveFeedbackPercentage() {\n//     const totalReviews = this.state.good + this.state.neutral + this.state.bad;\n//     const positiveReviews = this.state.good;\n\n//     return `${Math.round((positiveReviews / totalReviews) * 100)} %`;\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Section title={'Please leave feedback'}>\n//           <FeedbackOptions\n//             options={this.state}\n//             handleIncrement={this.handleIncrement}\n//           />\n//         </Section>\n\n//         {this.countTotalFeedback() > 0 ? (\n//           <div>\n//             <Section title={'Reviews statistics'}>\n//               <Statistics\n//                 onReviewGood={this.state.good}\n//                 onReviewNeutral={this.state.neutral}\n//                 onReviewBad={this.state.bad}\n//               />\n//             </Section>\n//             <Section title={'Reviews analitics'}>\n//               <Analitics\n//                 onTotalReviews={this.countTotalFeedback()}\n//                 onPositiveReviews={this.countPositiveFeedbackPercentage()}\n//               />\n//             </Section>\n//           </div>\n//         ) : (\n//           <div>\n//             <Section title={'Reviews statistics'}>\n//               <Notification message=\"🤷‍♀️ No feedback given yet 🤷‍♂️\" />\n//             </Section>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default ReviewCounter;\n","import ReviewCounter from './components/reviewCounter/ReviewCounter';\n\nfunction App() {\n  return (\n    <ReviewCounter\n      initialValueGood={0}\n      initialValueNeutral={0}\n      initialValueBad={0}\n    />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}